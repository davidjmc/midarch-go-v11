datatype PROCNAMES = t1 | t2 | t3 | requestor | crh | srh | namingproxy | fibonacciinvoker 
channel I_PreInvR_namingproxy,I_PreTerP_crh,I_PosTerR_requestor,I_PosInvP_crh,I_PreInvR_srh,I_PosTerR_srh,I_PosTerR_namingproxy,I_PosInvP_fibonacciinvoker,I_PosInvP_requestor
channel TerP,InvR,TerR,InvP : PROCNAMES
REQUESTOR = InvP.requestor -> I_PosInvP_requestor -> InvR.requestor -> TerR.requestor -> I_PosTerR_requestor -> TerP.requestor -> REQUESTOR
CRH = InvP.crh -> I_PosInvP_crh -> I_PreTerP_crh -> TerP.crh -> CRH
SRH = I_PreInvR_srh -> InvR.srh -> TerR.srh -> I_PosTerR_srh -> SRH
NAMINGPROXY = I_PreInvR_namingproxy -> InvR.namingproxy -> TerR.namingproxy -> I_PosTerR_namingproxy -> NAMINGPROXY
FIBONACCIINVOKER = InvP.fibonacciinvoker -> I_PosInvP_fibonacciinvoker -> TerP.fibonacciinvoker -> FIBONACCIINVOKER
T1 = InvP.namingproxy -> InvR.requestor -> TerR.requestor -> TerP.namingproxy -> T1
T2 = InvP.requestor -> InvR.crh -> TerR.crh -> TerP.requestor -> T2
T3 = InvP.srh -> InvR.fibonacciinvoker -> TerR.fibonacciinvoker -> TerP.srh -> T3

P1 = (REQUESTOR|||CRH|||SRH|||NAMINGPROXY|||FIBONACCIINVOKER)
[|{|InvR,TerR,InvP,TerP|}|]
(T1[[InvP <- InvR,InvR <- InvP,TerR <- TerP,TerP <- TerR]]|||T2[[InvP <- InvR,InvR <- InvP,TerR <- TerP,TerP <- TerR]]|||T3[[InvP <- InvR,InvR <- InvP,TerR <- TerP,TerP <- TerR]])
assert P1 :[deadlock free]