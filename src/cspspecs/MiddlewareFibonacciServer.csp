datatype PROCNAMES = crh | srh | t1 | t2 | t3 | namingProxy | fibonacciInvoker | requestor 
channel I_PreTerP,I_PreInvR,I_PosInvP,I_PosTerR
channel TerR,InvP,TerP,InvR : PROCNAMES
SRH = I_PreInvR -> InvR.srh -> TerR.srh -> I_PosTerR -> SRH
NAMINGPROXY = I_PreInvR -> InvR.namingProxy -> TerR.namingProxy -> I_PosTerR -> NAMINGPROXY
FIBONACCIINVOKER = InvP.fibonacciInvoker -> I_PosInvP -> TerP.fibonacciInvoker -> FIBONACCIINVOKER
REQUESTOR = InvP.requestor -> I_PosInvP -> InvR.requestor -> TerR.requestor -> I_PosTerR -> TerP.requestor -> REQUESTOR
CRH = InvP.crh -> I_PosInvP -> I_PreTerP -> TerP.crh -> CRH
T1 = InvP.namingProxy -> InvR.requestor -> TerR.requestor -> TerP.namingProxy -> T1
T2 = InvP.requestor -> InvR.crh -> TerR.crh -> TerP.requestor -> T2
T3 = InvP.srh -> InvR.fibonacciInvoker -> TerR.fibonacciInvoker -> TerP.srh -> T3

P1 = (SRH|||NAMINGPROXY|||FIBONACCIINVOKER|||REQUESTOR|||CRH)
[|{|InvR,TerR,InvP,TerP|}|]
(T1[[InvP <- InvR,InvR <- InvP,TerR <- TerP,TerP <- TerR]]|||T2[[InvP <- InvR,InvR <- InvP,TerR <- TerP,TerP <- TerR]]|||T3[[InvP <- InvR,InvR <- InvP,TerR <- TerP,TerP <- TerR]])
assert P1 :[deadlock free]