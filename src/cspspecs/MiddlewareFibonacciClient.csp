datatype PROCNAMES = requestor | t1 | t2 | crh | namingProxy | fibonacciProxy 
channel I_PosInvP,I_PosTerR,I_PreTerP,I_PreInvR
channel InvR,TerR,InvP,TerP : PROCNAMES
NAMINGPROXY = I_PreInvR -> InvR.namingProxy -> TerR.namingProxy -> I_PosTerR -> NAMINGPROXY
FIBONACCIPROXY = I_PreInvR -> InvR.fibonacciProxy -> TerR.fibonacciProxy -> I_PosTerR -> FIBONACCIPROXY
REQUESTOR = InvP.requestor -> I_PosInvP -> InvR.requestor -> TerR.requestor -> I_PosTerR -> TerP.requestor -> REQUESTOR
CRH = InvP.crh -> I_PosInvP -> I_PreTerP -> TerP.crh -> CRH
T1 = InvP.namingProxy -> InvR.requestor -> TerR.requestor -> TerP.namingProxy -> T1 [] InvP.fibonacciProxy -> InvR.requestor -> TerR.requestor -> TerP.fibonacciProxy -> T1
T2 = InvP.requestor -> InvR.crh -> TerR.crh -> TerP.requestor -> T2

P1 = (NAMINGPROXY|||FIBONACCIPROXY|||REQUESTOR|||CRH)
[|{|InvR,TerR,InvP,TerP|}|]
(T1[[InvP <- InvR,InvR <- InvP,TerR <- TerP,TerP <- TerR,InvP <- InvR,InvR <- InvP,TerR <- TerP,TerP <- TerR]]|||T2[[InvP <- InvR,InvR <- InvP,TerR <- TerP,TerP <- TerR]])
assert P1 :[deadlock free]